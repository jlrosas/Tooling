{
  "host": "hostname.com",
  "basePath": "/rest/admin/v2",
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "version": "2.0",
    "title": "store-transports"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/store-transports": {
      "get": {
        "tags": [
          "store-transports"
        ],
        "description": "Get a collection of Store transports.",
        "operationId": "getStoreTransports",
        "parameters": [
          {
            "name": "storeId",
            "in": "query",
            "description": "The Store ID.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "transportId",
            "in": "query",
            "description": "The transport.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "active",
            "in": "query",
            "description": "If it is active.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Store transports.",
            "schema": {
              "$ref": "#/definitions/StoreTransportCollection"
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          }
        }
      },
      "post": {
        "tags": [
          "store-transports"
        ],
        "description": "Create an Store transport.",
        "operationId": "createStoreTransport",
        "parameters": [
          {
            "in": "body",
            "name": "StoreTransport",
            "description": "An store transport.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreTransport"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          }
        }
      }
    },
    "/store-transports/storeId:{storeId},transportId:{transportId}": {
      "get": {
        "tags": [
          "store-transports"
        ],
        "description": "Get an Store transport.",
        "operationId": "getStoreTransportById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An store transport.",
            "schema": {
              "$ref": "#/definitions/StoreTransport"
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "store-transports"
        ],
        "description": "Delete an Store transport.",
        "operationId": "deleteStoreTransportById",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "store-transports"
        ],
        "description": "Update an Store transport.",
        "operationId": "updateStoreTransportById",
        "parameters": [
          {
            "in": "body",
            "name": "StoreTransport",
            "description": "An store transport.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreTransport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "storeId",
          "in": "path",
          "description": "The Store ID.",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "transportId",
          "in": "path",
          "description": "The transport.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/store-transports/storeId:{storeId},transportId:{transportId}/transports": {
      "get": {
        "tags": [
          "store-transports"
        ],
        "description": "Finds the transport in a store-transport relationship.",
        "operationId": "getTransportsOfStoreTransport",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An store transport.",
            "schema": {
              "$ref": "#/definitions/Transport"
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponseContainer"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "storeId",
          "in": "path",
          "description": "The Store ID.",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "transportId",
          "in": "path",
          "description": "The transport.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    }
  },
  "definitions": {
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the link."
        }
      },
      "description": "Links to related resources."
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "The error message code."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        },
        "messageKey": {
          "type": "string",
          "description": "The error message key."
        },
        "messageArguments": {
          "type": "array",
          "description": "The arguments used to construct the error message.",
          "items": {
            "type": "object"
          }
        },
        "correlationId": {
          "type": "string",
          "description": "The unique identifier for the request."
        },
        "locale": {
          "type": "string",
          "description": "The locale of the error message."
        }
      },
      "description": "The error message item model."
    },
    "ErrorResponseContainer": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "description": "The request identifier."
        },
        "errors": {
          "type": "array",
          "description": "The errors.",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      },
      "description": "The error message model."
    },
    "StoreTransport": {
      "type": "object",
      "properties": {
        "storeId": {
          "type": "integer",
          "format": "int32",
          "description": "The Store ID."
        },
        "transportId": {
          "type": "integer",
          "format": "int32",
          "description": "The transport."
        },
        "active": {
          "type": "integer",
          "format": "int32",
          "description": "If it is active."
        },
        "links": {
          "type": "object",
          "description": "Links to related resources.",
          "properties": {
            "transports": {
              "type": "object",
              "description": "The transport.",
              "properties": {
                "href": {
                  "type": "string",
                  "description": "The URL of the link."
                }
              }
            }
          }
        }
      },
      "description": "An store transport."
    },
    "StoreTransportCollection": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The total number of items."
        },
        "items": {
          "type": "array",
          "description": "The items.",
          "items": {
            "$ref": "#/definitions/StoreTransport"
          }
        }
      },
      "description": "A collection of Store transports."
    },
    "Transport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The transport ID."
        },
        "code": {
          "type": "string",
          "description": "The code of the transport."
        },
        "name": {
          "type": "string",
          "description": "The name of the transport."
        },
        "description": {
          "type": "string",
          "description": "The description."
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "The timeout."
        },
        "implemented": {
          "type": "string",
          "description": "If it is implemented."
        },
        "addressable": {
          "type": "string",
          "description": "If it is addressable."
        }
      },
      "description": "An store transport."
    }
  }
}